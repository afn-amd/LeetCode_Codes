Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.
A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. 
Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).

Example 1:
Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum as shown.

Example 2:
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is shown.
________________________________________________________________________________________________________________________________________________________________________________________________

class Solution(object):
    def getSum(self, element, row, col, matrix, memo):
        if row == len(matrix) - 1:
            return element
        if (row, col) in memo:
            return memo[(row, col)]

        if col == 0:
            result = element + min(
                self.getSum(matrix[row + 1][col], row + 1, col, matrix, memo),
                self.getSum(matrix[row + 1][col + 1], row + 1, col + 1, matrix, memo)
            )
        elif col == len(matrix) - 1:
            result = element + min(
                self.getSum(matrix[row + 1][col - 1], row + 1, col - 1, matrix, memo),
                self.getSum(matrix[row + 1][col], row + 1, col, matrix, memo)
            )
        else:
            result = element + min(
                self.getSum(matrix[row + 1][col - 1], row + 1, col - 1, matrix, memo),
                self.getSum(matrix[row + 1][col], row + 1, col, matrix, memo),
                self.getSum(matrix[row + 1][col + 1], row + 1, col + 1, matrix, memo)
            )

        memo[(row, col)] = result
        return result

    def minFallingPathSum(self, matrix):
        listOfSum = []
        memo = {}
        for col in range(0, len(matrix)):
            listOfSum.append(self.getSum(matrix[0][col], 0, col, matrix, memo))
        return min(listOfSum)

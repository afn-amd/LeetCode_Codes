Given a binary tree where node values are digits from 1 to 9. 
A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.
Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

Example 1:
Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).

Example 2:
Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).

Example 3:
Input: root = [9]
Output: 1
_________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________________

# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def numberOfPaths(self, node, digitFreq):
        if node is None:
            return 0
        digitFreq[node.val] += 1
        count = 0
        count += self.numberOfPaths(node.left, digitFreq)
        count += self.numberOfPaths(node.right, digitFreq)
        if (node.left is None) and (node.right is None):
            oddCount = 0
            for value in digitFreq:
                if (value % 2 != 0) and (value != 0):
                    oddCount += 1
            if oddCount <= 1:
                count += 1
        digitFreq[node.val] -= 1
        return count

    def pseudoPalindromicPaths(self, root):
        digitFreq = [0] * 10
        countOutput = self.numberOfPaths(root, digitFreq)
        return countOutput

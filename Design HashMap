Design a HashMap without using any built-in hash table libraries.
Implement the MyHashMap class:
    MyHashMap() initializes the object with an empty map.
    void put(int key, int value) inserts a (key, value) pair into the HashMap. If the key already exists in the map, update the corresponding value.
    int get(int key) returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key.
    void remove(key) removes the key and its corresponding value if the map contains the mapping for the key.

Example 1:
Input
["MyHashMap", "put", "put", "get", "get", "put", "get", "remove", "get"]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]

Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]
_________________________________________________________________________________________________________________________________________________________________________________________________________________

class MyHashMap:
    def __init__(self):
        self.size = 1000
        self.buckets = [None] * self.size

    def hash_function(self, key):
        return key % self.size

    def put(self, key, value):
        hash_key = self.hash_function(key)
        if self.buckets[hash_key] is None:
            self.buckets[hash_key] = [(key, value)]
        else:
            for i in range(len(self.buckets[hash_key])):
                if self.buckets[hash_key][i][0] == key:
                    self.buckets[hash_key][i] = (key, value)
                    return
            self.buckets[hash_key].append((key, value))

    def get(self, key):
        hash_key = self.hash_function(key)
        if self.buckets[hash_key] is not None:
            for k, v in self.buckets[hash_key]:
                if k == key:
                    return v
        return -1

    def remove(self, key):
        hash_key = self.hash_function(key)
        if self.buckets[hash_key] is not None:
            for i in range(len(self.buckets[hash_key])):
                if self.buckets[hash_key][i][0] == key:
                    del self.buckets[hash_key][i]
                    return

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.
A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.
    For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.

Example 1:
Input: text1 = "abcde", text2 = "ace" 
Output: 3  
Explanation: The longest common subsequence is "ace" and its length is 3.

Example 2:
Input: text1 = "abc", text2 = "abc"
Output: 3
Explanation: The longest common subsequence is "abc" and its length is 3.

Example 3:
Input: text1 = "abc", text2 = "def"
Output: 0
Explanation: There is no such common subsequence, so the result is 0.
_______________________________________________________________________________________________________________________________________________________________________________________________________________________

class Solution(object):
    def getLen(self, large, small, memo):
        m, n = len(large), len(small)
        if m == 0 or n == 0:
            return 0
        if memo[m][n] != -1:
            return memo[m][n]
        if large[0] == small[0]:
            result = 1 + self.getLen(large[1:], small[1:], memo)
        else:
            result = max(self.getLen(large[1:], small, memo), self.getLen(large, small[1:], memo))
        memo[m][n] = result
        return result

    def longestCommonSubsequence(self, text1, text2):
        if text1 == text2:
            return len(text1)
        m, n = len(text1), len(text2)
        memo = [[-1] * (n + 1) for _ in range(m + 1)]
        return self.getLen(text1, text2, memo)

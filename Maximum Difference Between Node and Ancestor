Given the root of a binary tree, find the maximum value v for which there exist different nodes a and b where v = |a.val - b.val| and a is an ancestor of b.
A node a is an ancestor of b if either: any child of a is equal to b or any child of a is an ancestor of b.

Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.

Example 2:
Input: root = [1,null,2,null,0,3]
Output: 3
_____________________________________________________________________________________________________________________________________________________________________________________________________________________

class Solution(object):
    result = 0
    def maxAncestorDiff(self, root):
        if not root:
            return 0
        return self.findResult(root, root.val, root.val)   

    def findResult(self, curr, curMin, curMax):
        if not curr:
            return
        self.result = max(self.result, abs(curMin - curr.val), abs(curMax - curr.val))
        curMin = min(curMin, curr.val)
        curMax = max(curMax, curr.val)
        self.findResult(curr.left, curMin, curMax)
        self.findResult(curr.right, curMin, curMax)
        return self.result

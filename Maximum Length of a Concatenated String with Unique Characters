You are given an array of strings arr.
A string s is formed by the concatenation of a subsequence of arr that has unique characters.
Return the maximum possible length of s.
A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

Example 1:
Input: arr = ["un","iq","ue"]
Output: 4
Explanation: All the valid concatenations are:
- ""
- "un"
- "iq"
- "ue"
- "uniq" ("un" + "iq")
- "ique" ("iq" + "ue")
Maximum length is 4.

Example 2:
Input: arr = ["cha","r","act","ers"]
Output: 6
Explanation: Possible longest valid concatenations are "chaers" ("cha" + "ers") and "acters" ("act" + "ers").

Example 3:
Input: arr = ["abcdefghijklmnopqrstuvwxyz"]
Output: 26
Explanation: The only string in arr has all 26 characters.
______________________________________________________________________________________________________________________________________________________________________________________________________________

class Solution(object):
    def maxLength(self, arr):
        charset = set()

        def overlap(charset, s):
            c = Counter(charset) + Counter(s)
            return max(c.values()) > 1

        def backtrack(i):
            if i==len(arr):
                return len(charset)
            res = 0
            if not overlap(charset, arr[i]):
                for c in arr[i]:
                    charset.add(c)
                res = backtrack(i+1)
                for c in arr[i]:
                    charset.remove(c)
            return max(res, backtrack(i+1))
        return backtrack(0)
